//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3620
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FortuneSharp {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FortuneSharp.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NAME
        ///       fortune - print a random, hopefully interesting, adage
        ///
        ///SYNOPSIS
        ///       fortune [-acefilosuw] [-n length] [ -m pattern] [[n%] file/dir/all]
        ///
        ///DESCRIPTION
        ///       When  fortune  is run with no arguments it prints out a random epigram.
        ///       Epigrams are divided into several categories, where  each  category  is
        ///       sub-divided  into those which are potentially offensive and those which
        ///       are not.
        ///
        ///   Options
        ///       The options are as follows:
        ///
        ///       -a     Choose from all l [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fortune_help {
            get {
                return ResourceManager.GetString("fortune_help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copyright (c) 2012 Jouni Uusimaa
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining
        ///a copy of this software and associated documentation files (the
        ///&quot;Software&quot;), to deal in the Software without restriction, including
        ///without limitation the rights to use, copy, modify, merge, publish,
        ///distribute, sublicense, and/or sell copies of the Software, and to
        ///permit persons to whom the Software is furnished to do so, subject to
        ///the following conditions:
        ///
        ///The above copyright notice and thi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MIT_license {
            get {
                return ResourceManager.GetString("MIT_license", resourceCulture);
            }
        }
    }
}
